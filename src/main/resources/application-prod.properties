# ============================================
# PRODUCTION CONFIGURATION
# Sistema de Gestión Inmobiliaria
# ============================================

# Application
spring.application.name=inmobiliaria-gestion
server.port=${PORT:8080}

# ============================================
# DATABASE - H2 File-Based (DISABLED - Migrated to PostgreSQL)
# ============================================
# ⚠️ H2 configuration has been disabled in favor of PostgreSQL/Supabase
# Uncomment these lines if you need to rollback to H2 for testing:
#
# spring.datasource.url=jdbc:h2:file:./data/proddb;DB_CLOSE_DELAY=-1
# spring.datasource.driver-class-name=org.h2.Driver
# spring.datasource.username=sa
# spring.datasource.password=
# spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# ============================================
# POSTGRESQL CONFIGURATION (ACTIVE)
# ============================================
# Production database: Supabase PostgreSQL
# Project reference: qqeompghmzqkjybshmux
# Using direct connection for Flyway compatibility and session-based operations
# Note: HikariCP connection pooling (max 10) provides efficient connection reuse
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://db.qqeompghmzqkjybshmux.supabase.co:5432/postgres}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.username=${DATABASE_USERNAME:postgres}
spring.datasource.password=${DATABASE_PASSWORD}

# JPA/Hibernate Configuration
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.open-in-view=false

# Connection Pool (HikariCP) - Optimized for Cloud Run
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.leak-detection-threshold=60000


# ============================================
# FLYWAY MIGRATIONS
# ============================================
spring.flyway.enabled=true
spring.flyway.baseline-on-migrate=true
spring.flyway.locations=classpath:db/migration
spring.flyway.validate-on-migrate=true
spring.flyway.out-of-order=false
spring.flyway.clean-disabled=true

# ============================================
# SECURITY - JWT
# ============================================
app.security.jwt.secret=${JWT_SECRET}
app.security.jwt.expiration-seconds=${JWT_EXPIRATION_SECONDS:3600}

# ============================================
# CORS CONFIGURATION (Production)
# ============================================
# For embedded frontend: Frontend and backend share same origin (Cloud Run URL)
# Must include the Cloud Run URL for crossorigin script loading
# Also keep localhost origins for local testing of production builds
cors.allowed-origins=http://localhost:5173,http://localhost:8080,https://inmobiliaria-api-eumzubw57q-uc.a.run.app

# ============================================
# GOOGLE VERTEX AI
# ============================================
google.genai.use.vertexai=${GOOGLE_GENAI_USE_VERTEXAI:true}
google.cloud.project=${GOOGLE_CLOUD_PROJECT}
google.cloud.location=${GOOGLE_CLOUD_LOCATION:us-central1}

# Agent Configuration
agent.model=gemini-2.0-flash
agent.name=inmobiliaria-assistant
agent.session.timeout=3600

# ============================================
# PERFORMANCE & THREADING
# ============================================
# Virtual Threads (Java 21+)
spring.threads.virtual.enabled=true

# Tomcat Configuration
server.tomcat.threads.max=200
server.tomcat.threads.min-spare=10
server.tomcat.connection-timeout=20000
server.tomcat.max-connections=8192

# ============================================
# ACTUATOR (Health & Metrics)
# ============================================
management.endpoints.web.base-path=/actuator
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=when-authorized
management.endpoint.health.probes.enabled=true
management.health.livenessstate.enabled=true
management.health.readinessstate.enabled=true

# ============================================
# API DOCUMENTATION
# ============================================
# Disable Swagger UI in production for security
# Or secure it with authentication
springdoc.swagger-ui.enabled=false
springdoc.api-docs.enabled=false

# ============================================
# SECURITY SETTINGS
# ============================================
# H2 Console - DISABLED (migrated to PostgreSQL)
# The H2 console is not needed and should not be exposed in production
spring.h2.console.enabled=false

# ============================================
# LOGGING
# ============================================
logging.level.root=INFO
logging.level.com.inmobiliaria.gestion=INFO
logging.level.org.springframework.web=INFO
logging.level.org.springframework.security=INFO
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN
logging.level.com.zaxxer.hikari=INFO

# JSON logging for Cloud Logging
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# ============================================
# FILE UPLOAD (if needed)
# ============================================
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# ============================================
# STATIC RESOURCES
# ============================================
spring.web.resources.cache.cachecontrol.max-age=365d
spring.web.resources.cache.cachecontrol.cache-public=true
